# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     env:
#       SERVER_IP: ${{ secrets.SERVER_IP }}
#       SERVER_USER: ${{ secrets.SERVER_USER }}
#       SSH_KEY: ${{ secrets.SSH_KEY }}

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_KEY }}
      
#       - name: Add Server to known_hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

#       - name: Transfer Project Files
#         run: |
#           rsync -avz -e "ssh -v" --exclude='.github/' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}

#       - name: Verify .env Files
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "
#             [ -f /home/${SERVER_USER}/database/.env ] && echo '.env file exists in database directory' || echo 'Missing .env file in database directory';
#             [ -f /home/${SERVER_USER}/backend/.env ] && echo '.env file exists in backend directory' || echo 'Missing .env file in backend directory';
#             [ -f /home/${SERVER_USER}/frontend/.env ] && echo '.env file exists in frontend directory' || echo 'Missing .env file in frontend directory';
#           "
          
#       - name: Set Executable Permissions
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "find /home/${SERVER_USER}/ -type f -name '*.sh' -exec chmod +x {} +"

#       - name: Run Master Script
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/master.sh"

#       - name: Debug Database Setup
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "cat /home/${SERVER_USER}/database/.env || echo 'Cannot read .env'"

#       - name: Set Up Database
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/database/db_setup.sh"

#       - name: Debug Backend Setup
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "cat /home/${SERVER_USER}/backend/.env || echo 'Cannot read .env'"

#       - name: Set Up Backend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/backend/app_setup.sh"

#       - name: Debug Frontend Setup
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "cat /home/${SERVER_USER}/frontend/.env || echo 'Cannot read .env'"

#       - name: Set Up Frontend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/frontend/web_setup.sh"

#       - name: Set Up Monitoring
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/backend/monitoring.sh"

#       - name: Set Up Alertmanager
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/backend/alertmanager_setup.sh"

#       - name: Collect Logs
#         run: |
#           mkdir -p logs
#           rsync -avz --include="*.log" --exclude="*" -e "ssh -o StrictHostKeyChecking=no" ${SERVER_USER}@${SERVER_IP}:/home/${SERVER_USER}/ logs/

#       - name: Verify Deployment
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }} || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9090 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9093 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:3000 || exit 1"

#       - name: Notify Success
#         if: success()
#         run: echo "Deployment successful!"

#       - name: Notify Failure
#         if: failure()
#         run: echo "Deployment failed!"












######################## RECENT WORKFLOW ############################
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      
      # Add server to known_hosts
      - name: Add Server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      # Transfer files to the server
      - name: Transfer Project Files
        run: |
          rsync -avz -e "ssh -v" --exclude='.github/' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}
          
      # Verify file transfer
      - name: Verify .env Files
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "
            [ -f /home/${SERVER_USER}/database/.env ] && echo '.env file exists in database directory' || echo 'Missing .env file in database directory';
            [ -f /home/${SERVER_USER}/backend/.env ] && echo '.env file exists in backend directory' || echo 'Missing .env file in backend directory';
            [ -f /home/${SERVER_USER}/frontend/.env ] && echo '.env file exists in frontend directory' || echo 'Missing .env file in frontend directory';
          "
          
      # Set executable permissions on server scripts
      - name: Set Executable Permissions
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "find /home/${SERVER_USER}/ -type f -name '*.sh' -exec chmod +x {} +"

      # Execute master.sh to install prerequisites
      - name: Run Master Script
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/master.sh"

      # Debug Database Environment Variables
      - name: Debug Database Setup
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "
            echo 'Debugging .env variables for Database Setup:';
            cat /home/${SERVER_USER}/database/.env || echo 'Cannot read .env';
          "

      # Run database setup script
      - name: Set Up Database
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/database/db_setup.sh"

      # Debug Backend Environment Variables
      - name: Debug Backend Setup
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "
            echo 'Debugging .env variables for Backend Setup:';
            cat /home/${SERVER_USER}/backend/.env || echo 'Cannot read .env';
          "

      # Run backend setup script
      - name: Set Up Backend
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/backend/app_setup.sh"

      # Debug Frontend Environment Variables
      - name: Debug Frontend Setup
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "
            echo 'Debugging .env variables for Frontend Setup:';
            cat /home/${SERVER_USER}/frontend/.env || echo 'Cannot read .env';
          "

      # Run web setup script
      - name: Set Up Frontend
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/frontend/web_setup.sh"

      # Run monitoring setup script
      - name: Set Up Monitoring
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/backend/monitoring.sh"

      # Run alert manager setup script
      - name: Set Up Alertmanager
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/backend/alertmanager_setup.sh"

      # Collect logs from the server
      - name: Collect Logs
        run: |
          mkdir -p logs
          rsync -avz --include="*.log" --exclude="*" -e "ssh -o StrictHostKeyChecking=no" ${SERVER_USER}@${SERVER_IP}:/home/${SERVER_USER}/ logs/

      # Verify deployment
      - name: Verify Deployment
        run: |
          ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }} || exit 1"
          ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9090 || exit 1"
          ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9093 || exit 1"
          ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:3000 || exit 1"

      # Notify success
      - name: Notify Success
        if: success()
        run: echo "Deployment successful!"

      # Notify failure
      - name: Notify Failure
        if: failure()
        run: echo "Deployment failed!"



















# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     env:
#       SERVER_IP: ${{ secrets.SERVER_IP }}
#       SERVER_USER: ${{ secrets.SERVER_USER }}
#       SSH_KEY: ${{ secrets.SSH_KEY }}

#     steps:
#       # Checkout the repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # Set up SSH
#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_KEY }}
      
#       # Add server to known_hosts
#       - name: Add Server to known_hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
#       # Transfer files to the server
#       - name: Transfer Project Files
#         run: |
#           rsync -avz -e "ssh -v" --exclude='.github/' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/project-directory

#       # Verify file transfer
#       - name: Verify .env Files
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "
#             [ -f /home/${SERVER_USER}/project-directory/database/.env ] && echo '.env file exists in database directory' || echo 'Missing .env file in database directory';
#             [ -f /home/${SERVER_USER}/project-directory/backend/.env ] && echo '.env file exists in backend directory' || echo 'Missing .env file in backend directory';
#             [ -f /home/${SERVER_USER}/project-directory/frontend/.env ] && echo '.env file exists in frontend directory' || echo 'Missing .env file in frontend directory';
#           "
          
#       # Set executable permissions on server scripts
#       - name: Set Executable Permissions
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "find /home/${SERVER_USER}/project-directory/ -type f -name '*.sh' -exec chmod +x {} +"

#       # Execute master.sh to install prerequisites
#       - name: Run Master Script
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/master.sh"

#       # Debug Database Environment Variables
#       - name: Debug Database Setup
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "
#             echo 'Debugging .env variables for Database Setup:';
#             cat /home/${SERVER_USER}/project-directory/database/.env || echo 'Cannot read .env';
#           "

#       # Run database setup script
#       - name: Set Up Database
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/database/db_setup.sh"

#       # Debug Backend Environment Variables
#       - name: Debug Backend Setup
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "
#             echo 'Debugging .env variables for Backend Setup:';
#             cat /home/${SERVER_USER}/project-directory/backend/.env || echo 'Cannot read .env';
#           "

#       # Run backend setup script
#       - name: Set Up Backend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/backend/app_setup.sh"

#       # Debug Frontend Environment Variables
#       - name: Debug Frontend Setup
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "
#             echo 'Debugging .env variables for Frontend Setup:';
#             cat /home/${SERVER_USER}/project-directory/frontend/.env || echo 'Cannot read .env';
#           "

#       # Run web setup script
#       - name: Set Up Frontend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/frontend/web_setup.sh"

#       # Run monitoring setup script
#       - name: Set Up Monitoring
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/backend/monitoring.sh"

#       # Run alert manager setup script
#       - name: Set Up Alertmanager
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/backend/alertmanager_setup.sh"

#       # Collect logs from the server
#       - name: Collect Logs
#         run: |
#           mkdir -p logs
#           rsync -avz --include="*.log" --exclude="*" -e "ssh -o StrictHostKeyChecking=no" ${SERVER_USER}@${SERVER_IP}:/home/${SERVER_USER}/project-directory/ logs/

#       # Verify deployment
#       - name: Verify Deployment
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }} || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9090 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9093 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:3000 || exit 1"

#       # Notify success
#       - name: Notify Success
#         if: success()
#         run: echo "Deployment successful!"

#       # Notify failure
#       - name: Notify Failure
#         if: failure()
#         run: echo "Deployment failed!"






















# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     env:
#       SERVER_IP: ${{ secrets.SERVER_IP }}
#       SERVER_USER: ${{ secrets.SERVER_USER }}
#       SSH_KEY: ${{ secrets.SSH_KEY }}

#     steps:
#       # Checkout the repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # Set up SSH
#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_KEY }}
      
#       # Add server to known_hosts
#       - name: Add Server to known_hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
#       # Transfer files to the server
#       - name: Transfer Project Files
#         run: |
#           rsync -avz -e "ssh -v" --exclude='.git/' --exclude='.github/' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/project-directory

#       # Verify file transfer
#       - name: Verify .env Files
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "
#             [ -f /home/${SERVER_USER}/project-directory/database/.env ] && echo '.env file exists in database directory' || echo 'Missing .env file in database directory';
#             [ -f /home/${SERVER_USER}/project-directory/backend/.env ] && echo '.env file exists in backend directory' || echo 'Missing .env file in backend directory';
#             [ -f /home/${SERVER_USER}/project-directory/frontend/.env ] && echo '.env file exists in frontend directory' || echo 'Missing .env file in frontend directory';
#           "

#       # Set executable permissions on server scripts
#       - name: Set Executable Permissions
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "find /home/${SERVER_USER}/project-directory/ -type f -name '*.sh' -exec chmod +x {} +"

#       # Execute master.sh to install prerequisites
#       - name: Run Master Script
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/master.sh"

#       # Run database setup script
#       - name: Set Up Database
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/database/db_setup.sh"

#       # Run backend setup script
#       - name: Set Up Backend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/backend/app_setup.sh"

#       # Run web setup script
#       - name: Set Up Frontend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/frontend/web_setup.sh"

#       # Run monitoring setup script
#       - name: Set Up Monitoring
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/backend/monitoring.sh"

#       # Run alert manager setup script
#       - name: Set Up Alertmanager
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "sudo /home/${SERVER_USER}/project-directory/backend/alertmanager_setup.sh"

#       # Verify deployment
#       - name: Verify Deployment
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }} || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9090 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:9093 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://${{ secrets.SERVER_IP }}:3000 || exit 1"

#       # Notify success
#       - name: Notify Success
#         if: success()
#         run: echo "Deployment successful!"

#       # Notify failure
#       - name: Notify Failure
#         if: failure()
#         run: echo "Deployment failed!"











# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main  # Run the workflow on pushes to the main branch
#   pull_request:
#     branches:
#       - main  # Optional: Run workflow for pull requests to main branch
#   workflow_dispatch:  # Allow manual triggering of the workflow

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     env:
#       SERVER_IP: 54.217.141.168  # Replace with your server's public IP
#       SERVER_USER: ubuntu
#       SSH_KEY: ${{ secrets.SSH_KEY }}  # Add your private SSH key to GitHub Secrets
#       BRANCH: main  # Branch to deploy from

#     steps:
#       # Checkout the repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # Set up SSH
#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_KEY }}
      
#       # Add server to known_hosts
#       - name: Add server to known_hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        

#       # Transfer files to the server
#       - name: Transfer Project Files
#         run: |
#           rsync -avz -e "ssh -v" --exclude='.git/' --exclude='.github/' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/project-directory
      
#       # Set executable permissions on server files
#       - name: Set Executable Permissions on Server Files
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/project-directory/**/*.sh"
        

#         env:
#           SERVER_IP: ${{ secrets.SERVER_IP }}
#           SERVER_USER: ubuntu


#       # Execute master.sh to install prerequisites
#       - name: Run Master Script
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/master.sh && sudo /home/${SERVER_USER}/master.sh" || { echo 'Master Script Failed'; exit 1; }

#       # Run database setup script
#       - name: Set Up Database
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/database/db_setup.sh && sudo /home/${SERVER_USER}/database/db_setup.sh" || { echo 'Database Setup Failed'; exit 1; }

#       # Run backend setup script
#       - name: Set Up Backend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/backend/app_setup.sh && sudo /home/${SERVER_USER}/backend/app_setup.sh" || { echo 'Backend Setup Failed'; exit 1; }

#       # Run web setup script
#       - name: Set Up Frontend
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/frontend/web_setup.sh && sudo /home/${SERVER_USER}/frontend/web_setup.sh" || { echo 'Frontend Setup Failed'; exit 1; }


#       # Run monitoring setup script
#       - name: Set Up Monitoring
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/backend/monitoring.sh && sudo /home/${SERVER_USER}/backend/monitoring.sh" || { echo 'Monitoring Setup Failed'; exit 1; }

#       # Run alert manager setup script
#       - name: Set Up Alertmanager
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "chmod +x /home/${SERVER_USER}/backend/alertmanager_setup.sh && sudo /home/${SERVER_USER}/backend/alertmanager_setup.sh" || { echo 'Alertmanager Setup Failed'; exit 1; }


#       # Verify deployment
#       - name: Verify Deployment
#         run: |
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://54.217.141.168 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://54.217.141.168:9090 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://54.217.141.168:9093 || exit 1"
#           ssh ${SERVER_USER}@${SERVER_IP} "curl -I http://54.217.141.168:3000 || exit 1"

#       # Send success notification
#       - name: Notify Success
#         if: success()
#         run: echo "Deployment successful!"

#       # Send failure notification
#       - name: Notify Failure
#         if: failure()
#         run: echo "Deployment failed!"